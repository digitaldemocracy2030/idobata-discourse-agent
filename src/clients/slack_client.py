import aiohttp
from src.config import settings

class SlackClient:
    def __init__(self):
        self.webhook_url = settings.SLACK_WEBHOOK_URL

    def _determine_header(self, message: str) -> str:
        """
        „É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂÜÖÂÆπ„ÇíËß£Êûê„Åó„Å¶ÈÅ©Âàá„Å™„Éò„ÉÉ„ÉÄ„Éº„ÇíÊ±∫ÂÆö„Åô„Çã
        """
        message_lower = message.lower()
        
        # „Éà„Éî„ÉÉ„ÇØÂàÜÊûêÈñ¢ÈÄ£„ÅÆÈÄöÁü•
        if "[„É¨„Éì„É•„ÉºÂæÖ„Å°]" in message:
            return "üëÄ *„Éà„Éî„ÉÉ„ÇØÂàÜÊûê„É¨„Éì„É•„ÉºÂæÖ„Å°*"
        if "ÂàÜÊûê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü" in message:
            return "üìä *„Éà„Éî„ÉÉ„ÇØÂàÜÊûê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü*"
        if "ÂàÜÊûê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü" in message:
            return "‚ùå *„Éà„Éî„ÉÉ„ÇØÂàÜÊûê„Ç®„É©„Éº*"
            
        # „É¢„Éá„É¨„Éº„Ç∑„Éß„É≥Èñ¢ÈÄ£„ÅÆÈÄöÁü•
        if "hate speech" in message_lower or "„Éò„Ç§„Éà„Çπ„Éî„Éº„ÉÅ" in message_lower:
            return "ü§¨ *„Éò„Ç§„Éà„Çπ„Éî„Éº„ÉÅ„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü*"
        if "explicit content" in message_lower or "Èú≤È™®" in message_lower:
            return "üîû *Èú≤È™®„Å™„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü*"
        if "harassment" in message_lower or "„Éè„É©„Çπ„É°„É≥„Éà" in message_lower:
            return "üò° *„Éè„É©„Çπ„É°„É≥„Éà„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü*"
        if "spam" in message_lower or "„Çπ„Éë„É†" in message_lower:
            return "ü§ñ *„Çπ„Éë„É†„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü*"
        if "similar" in message_lower or "È°û‰ºº" in message_lower or "duplicate" in message_lower:
            return "‚ö†Ô∏è *È°û‰ºº„Åó„Åü„Éà„Éî„ÉÉ„ÇØ„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü*"
            
        # Ë´ñÁÇπÂàÜÊûêÈñ¢ÈÄ£„ÅÆÈÄöÁü•
        if "Ë´ñÁÇπ" in message or "ÊÑèË¶ã„ÅÆÂàÜÂ∏É" in message:
            return "üí≠ *Êñ∞„Åó„ÅÑË´ñÁÇπ„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü*"
        if "„Éá„Ç£„Çπ„Ç´„ÉÉ„Ç∑„Éß„É≥" in message:
            return "üó£Ô∏è *„Éá„Ç£„Çπ„Ç´„ÉÉ„Ç∑„Éß„É≥ÂàÜÊûêÁµêÊûú*"
            
        # „Åù„ÅÆ‰ªñ„ÅÆ‰∏çÈÅ©Âàá„Å™„Ç≥„É≥„ÉÜ„É≥„ÉÑ
        return "üö´ *‰∏çÈÅ©Âàá„Å™„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü*"

    async def send_notification(self, message: str) -> None:
        """
        Slack„Å´„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°„Åô„Çã
        """
        if not self.webhook_url:
            print("Slack webhook URL is not configured")
            return

        async with aiohttp.ClientSession() as session:
            try:
                # „É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂÜÖÂÆπ„ÇíËß£Êûê„Åó„Å¶„Éò„ÉÉ„ÉÄ„Éº„ÇíÊ±∫ÂÆö
                header = self._determine_header(message)
                
                payload = {
                    "text": message,
                    "blocks": [
                        {
                            "type": "section",
                            "text": {
                                "type": "mrkdwn",
                                "text": header
                            }
                        },
                        {
                            "type": "section",
                            "text": {
                                "type": "mrkdwn",
                                "text": message
                            }
                        }
                    ]
                }
                
                async with session.post(self.webhook_url, json=payload) as response:
                    if response.status != 200:
                        print(f"Failed to send Slack notification: {response.status}")
                        
            except Exception as e:
                print(f"Error sending Slack notification: {str(e)}")